void mdf::reeC_TreeSyncer::PostProcess(
  reeN_Commands::S_UpdateVisibilityTask& Cmd)
{
  reeN_Factory::WithRenderer([&](reeN_Cobalt::IRenderer* R)
  {
    for (auto r : Cmd.myRenderables)
    {
      auto& ri = myRenderableInfo[Tsize(r)];

      auto& bl = myBufferLayouts[Tsize(ri.myLayout)];
      auto& bg = bl.myBufferGroups[Tsize(ri.myBufferGroup)];

      for (auto& pl : ri.myPipelines)
      {
<<<<<<<<<<<<<<<<<<<<<
        bg.ForAllPipelineBuffers(pl, [&](S_BufferPipeline* ppdPtr)
||||||||||||||||||||
        auto& ppd = bg.myPerPipelineData[Tsize(pl)];

        if (ppd.myIndirectDrawBuffer && ppd.myShadowFirstChangedByte != -1)
===================
        auto ppdPtr = bg.FindBufferPipeline(shadT_RenderModeId(0), shadT_RenderPassId(0), pl);
        ASSERT(ppdPtr);
        auto& ppd = *ppdPtr;

        if (ppd.myIndirectDrawBuffer && ppd.myShadowFirstChangedByte != -1)
>>>>>>>>>>>>>>>>>>
        {
          ASSERT(ppdPtr);
          auto& ppd = *ppdPtr;

          if (ppd.myIndirectDrawBuffer && ppd.myShadowFirstChangedByte != -1)
          {
            ppd.myIndirectDrawBuffer->QueueDataUpdate(
              ppd.myShadowDrawBuffer.data() + ppd.myShadowFirstChangedByte,
              ppd.myShadowLastChangedByte - ppd.myShadowFirstChangedByte,
              ppd.myShadowFirstChangedByte);

            ppd.myShadowFirstChangedByte = -1;
            ppd.myShadowLastChangedByte = 0;
          }
        });
      }
    }
  });
}
